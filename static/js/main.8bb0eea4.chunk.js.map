{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","weather","setWeather","setImgData","img","setImg","loading","setLoading","search","setSearch","input","setInput","error","setError","useEffect","handleFetch","setTimeout","a","fetch","process","response","status","Error","json","description","imgResponse","imgData","results","Math","floor","random","urls","regular","console","log","message","backgroundImgStyle","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","className","style","onSubmit","event","preventDefault","type","name","placeholder","value","onChange","e","target","main","temp","humidity","wind","speed","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA0IeA,EApIH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAgBK,GAAhB,WACA,EAAsBL,mBAAS,IAA/B,mBAAOM,EAAP,KAAYC,EAAZ,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA4BT,mBAAS,WAArC,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAA0BX,mBAAS,IAAnC,mBAAOY,EAAP,KAAcC,EAAd,KACA,EAA0Bb,oBAAS,GAAnC,mBAAOc,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,IACAC,YAAW,WACTT,GAAW,KACV,OACF,CAACC,IAEJ,IAAMO,EAAW,uCAAG,kCAAAE,EAAA,+EAEOC,MAAM,oDAAD,OAAqDV,EAArD,kBAtBlBW,mCAsBkB,kBAFZ,UAGQ,OADlBC,EAFU,QAGHC,OAHG,sBAIR,IAAIC,MAAM,gCAJF,uBAMGF,EAASG,OANZ,cAMVxB,EANU,OAOhBC,EAAQD,GACRG,EAAWH,EAAKE,QAAQ,GAAGuB,aARX,UAUUN,MAAM,gDAAD,OAAiDnB,EAAKE,QAAQ,GAAGuB,YAAjE,sBA7BZL,gDAmBH,WAWW,OADrBM,EAVU,QAWAJ,OAXA,uBAYR,IAAIC,MAAM,0BAZF,yBAcMG,EAAYF,OAdlB,QAcVG,EAdU,OAehBvB,EAAWuB,GACXrB,EAAOqB,EAAQC,QAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,WAAgBC,KAAKC,SAC5DC,QAAQC,IAAIR,GAjBI,kDAmBhBb,EAAS,KAAMsB,SAnBC,0DAAH,qDA6BjB,GAAI7B,EAAS,OAAO,4CACpB,GAAIM,EACF,OACE,qCACE,wCACA,6BAAKA,OAKX,IAAMwB,EAAqB,CACzBC,gBAAgB,OAAD,OAASjC,EAAT,KACfkC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aAGpB,OACE,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,SAAd,+BACE,sBAAKA,UAAU,OAAOC,MAAON,EAA7B,UACE,uBAAMO,SA3BO,SAACC,GACpBA,EAAMC,iBACNpC,EAAUC,GACVC,EAAS,KAwBH,UACE,uBAAOmC,KAAK,OACVC,KAAK,SACLN,UAAU,YACVO,YAAY,kBACZC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOxC,EAASwC,EAAEC,OAAOH,UACrC,wBAAQR,UAAU,eAAeK,KAAK,SAAtC,uBAEF,oBAAIL,UAAU,cAAd,SAA6B1C,EAAKgD,OAClC,oBAAGN,UAAU,OAAb,0BAAkC1C,EAAKsD,KAAKC,QAC5C,oBAAGb,UAAU,OAAb,uBAA+B1C,EAAKsD,KAAKE,YACzC,oBAAGd,UAAU,OAAb,sBAA8BxC,KAC9B,oBAAGwC,UAAU,OAAb,yBAAiC1C,EAAKyD,KAAKC,MAA3C,YAEJ,mBAAGC,KAAK,oCAAoCjB,UAAU,UAAtD,mCC5ESkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8bb0eea4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst API_KEY_UNSPLASH = process.env.REACT_APP_API_KEY_UNSPLASH;\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [weather, setWeather] = useState(\"\");\n  const [imgData, setImgData] = useState([]);\n  const [img, setImg] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"chester\");\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    handleFetch();\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  }, [search]);\n\n  const handleFetch = async () => {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=${API_KEY}&units=metric`);\n      if (response.status !== 200) {\n        throw new Error(\"Failed to fetch weather data\");\n      }\n      const data = await response.json();\n      setData(data);\n      setWeather(data.weather[0].description);\n\n      const imgResponse = await fetch(`https://api.unsplash.com/search/photos?query=${data.weather[0].description}&client_id=${API_KEY_UNSPLASH}`);\n      if (imgResponse.status !== 200) {\n        throw new Error(\"Failed to fetch images\");\n      }\n      const imgData = await imgResponse.json();\n      setImgData(imgData);\n      setImg(imgData.results[Math.floor(Math.random() * 10)].urls.regular);\n      console.log(imgData);\n    } catch (Error) {\n      setError(Error.message);\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSearch(input);\n    setInput(\"\");\n  }\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) {\n    return (\n      <>\n        <h1>Error.</h1>\n        <h2>{error}</h2>\n      </>\n    );\n  }\n\n  const backgroundImgStyle = {\n    backgroundImage: `url(${img})`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\"\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header\">Check The Weather</h1>\n        <div className=\"main\" style={backgroundImgStyle}>\n          <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n              name=\"search\"\n              className=\"searchBar\"\n              placeholder=\"Enter city name\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)} />\n            <button className=\"submitButton\" type=\"sumbit\">Submit</button>\n          </form>\n          <h3 className=\"placeHeader\">{data.name}</h3>\n          <p className=\"text\">Temperature: {data.main.temp}</p>\n          <p className=\"text\">Humidity: {data.main.humidity}</p>\n          <p className=\"text\">Weather: {weather}</p>\n          <p className=\"text\">Wind Speed: {data.wind.speed}mph</p>\n        </div>\n      <a href=\"https://github.com/BrandonCoates1\" className=\"creator\">By Brandon Coates</a>\n    </div>\n  );\n}\n\n// class App extends React.Component {\n//   state ={\n//     data: [],\n//     error: false,\n//     loading: true,\n//   }\n\n//   componentDidMount() {\n//     this.handleFetch();\n//     // can do it this way to create a loading screen at launch of app\n//     setTimeout(() => {\n//       this.setState({ loading: false });\n//     }, 1000);\n//   }\n\n//   handleFetch = async () => {\n//     try {\n//       const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=manchester&appid=${API_KEY}&units=metric`);\n//       const data = await response.json();\n//       // or can do this with a property in the state\n//       // this.setState({ data: data, loading: false });\n//       this.setState({ data: data });\n//     } catch (error) {\n//       this.setState({ error: true });\n//     }\n//   }\n\n//   render() {\n//     const { data, loading } = this.state;\n//     if (loading) return <h1>Loading...</h1>\n//     if(this.state.error) return <h1>Error...</h1>\n//     return (\n//       <>\n//         <h1>Hello World</h1>\n//         {data.main && (\n//           <div>\n//               <h3>Name: {data.name}</h3>\n//               <p>Temp: {data.main.temp}</p>\n//           </div>\n//         )}\n//       </>\n//     )\n//   }\n// }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}